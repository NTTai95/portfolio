package com.freelancer.controller;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import com.freelancer.exceptions.DataConflictException;
import com.freelancer.mysql.model.Apply;
import com.freelancer.mysql.model.Job;
import com.freelancer.mysql.model.Milestone;
import com.freelancer.mysql.repository.RepositoryApply;
import com.freelancer.mysql.repository.RepositoryJob;
import com.freelancer.mysql.repository.RepositoryMilestone;
import com.freelancer.service.ServiceNotification;
import com.freelancer.utils.EndPoint;
import com.freelancer.utils.SecurityUtil;
import lombok.RequiredArgsConstructor;

@RestController
@RequiredArgsConstructor
public class ControllerSelectFreelancer {
    private final RepositoryApply repositoryApply;
    private final RepositoryJob repositoryJob;
    private final SecurityUtil securityUtil;
    private final ServiceNotification serviceNotification;
    private final RepositoryMilestone repositoryMilestone;

    @PreAuthorize("hasRole('NHA_TUYEN_DUNG')")
    @PatchMapping(EndPoint.Job.SELECT_FREELANCER)
    @Transactional
    public ResponseEntity<?> selectFreelancer(@PathVariable Integer id,
            @PathVariable Integer applyId) {
        Integer currentEmployerId = securityUtil.getCurrentUser().getId();

        // T√¨m Apply v√† validate
        Apply selectedApply = repositoryApply.findById(applyId).orElseThrow(
                () -> new DataConflictException("Kh√¥ng t√¨m th·∫•y ƒë∆°n ·ª©ng tuy·ªÉn v·ªõi ID: " + applyId));

        Job job = selectedApply.getJob();

        // Ki·ªÉm tra job ID trong URL kh·ªõp v·ªõi job c·ªßa apply
        if (!job.getId().equals(id)) {
            throw new DataConflictException("ID c√¥ng vi·ªác kh√¥ng kh·ªõp v·ªõi ƒë∆°n ·ª©ng tuy·ªÉn!");
        }

        // Validate job c√≥ th·ªÉ ch·ªçn freelancer kh√¥ng
        validateJobForFreelancerSelection(job, currentEmployerId);

        // Ki·ªÉm tra apply ƒëang ·ªü tr·∫°ng th√°i PENDING
        if (selectedApply.getStatus() != Apply.Status.PENDING) {
            throw new DataConflictException("ƒê∆°n ·ª©ng tuy·ªÉn n√†y ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω!");
        }

        String link = "http://localhost:3000/profile/job-listings?status=IN_PROGRESS&select="
                + job.getId();

        // Accept apply ƒë∆∞·ª£c ch·ªçn
        selectedApply.setStatus(Apply.Status.ACCEPT);
        repositoryApply.save(selectedApply);
        serviceNotification.sendNoticationWithUserId(selectedApply.getFreelancer().getId(),
                "·ª®ng tuy·ªÉn th√†nh c√¥ng", "B·∫°n ƒë√£ ƒë∆∞·ª£c ch·ªçn cho c√¥ng vi·ªác '" + job.getTitle() + "'",
                link);

        Milestone milestone = new Milestone();
        milestone.setContent("Ho√†n th√†nh c√°c c√¥ng vi·ªác ƒë∆∞·ª£c giao!");
        milestone.setEmployer(job.getEmployer());
        milestone.setJob(job);
        milestone.setPercent(Byte.valueOf("100"));
        milestone.setBidAmount(selectedApply.getBidAmount());
        milestone.setStartAt(job.getClosedAt());
        milestone.setEndAt(job.getClosedAt().plusHours(job.getDurationHours()));
        milestone.setFreelancer(selectedApply.getFreelancer());
        milestone.setStatus(Milestone.Status.DRAFT);

        repositoryMilestone.save(milestone);

        // T·ª± ƒë·ªông reject t·∫•t c·∫£ apply kh√°c c·ªßa job n√†y
        int rejectedCount = autoRejectOtherApplies(job, applyId);

        // Chuy·ªÉn job sang tr·∫°ng th√°i IN_PROGRESS
        job.setStatus(Job.Status.PREPARING);
        repositoryJob.save(job);

        // Tr·∫£ v·ªÅ th√¥ng tin chi ti·∫øt v·ªÅ vi·ªác ch·ªçn freelancer
        Map<String, Object> response = new HashMap<>();
        response.put("message", "ƒê√£ ch·ªçn freelancer th√†nh c√¥ng!");
        response.put("selectedFreelancer", Map.of("id", selectedApply.getFreelancer().getId(),
                "fullName", selectedApply.getFreelancer().getFullName(), "email",
                selectedApply.getFreelancer().getEmail(), "bidAmount", selectedApply.getBidAmount(),
                "estimatedHours", selectedApply.getEstimatedHours()));
        response.put("jobStatus", job.getStatus());
        response.put("autoRejectedCount", rejectedCount);
        response.put("timestamp", LocalDateTime.now());

        return ResponseEntity.ok(response);
    }

    @PreAuthorize("hasRole('NHA_TUYEN_DUNG')")
    @GetMapping(EndPoint.Job.APPLIES)
    @Transactional
    public ResponseEntity<?> getJobApplies(@PathVariable Integer id) {
        Integer currentEmployerId = securityUtil.getCurrentUser().getId();

        // T√¨m Job v√† validate
        Job job = repositoryJob.findById(id).orElseThrow(
                () -> new DataConflictException("Kh√¥ng t√¨m th·∫•y c√¥ng vi·ªác v·ªõi ID: " + id));

        // Ki·ªÉm tra job thu·ªôc v·ªÅ employer hi·ªán t·∫°i
        if (!job.getEmployer().getId().equals(currentEmployerId)) {
            throw new DataConflictException("B·∫°n kh√¥ng c√≥ quy·ªÅn xem ·ª©ng tuy·ªÉn c·ªßa c√¥ng vi·ªác n√†y!");
        }

        // üî• AUTO REJECT: T·ª± ƒë·ªông reject c√°c apply PENDING n·∫øu job ƒë√£ c√≥ freelancer ƒë∆∞·ª£c ch·∫•p nh·∫≠n
        int autoRejectedCount = performAutoRejectOnPageLoad(job);

        // L·∫•y danh s√°ch apply v√† map th√¥ng tin c·∫ßn thi·∫øt (sau khi ƒë√£ auto reject)
        List<Map<String, Object>> appliesData = job.getApplies().stream().map(apply -> {
            Map<String, Object> applyData = new HashMap<>();
            applyData.put("id", apply.getId());
            applyData.put("content", apply.getContent());
            applyData.put("bidAmount", apply.getBidAmount());
            applyData.put("estimatedHours", apply.getEstimatedHours());
            applyData.put("status", apply.getStatus());
            applyData.put("createdAt", apply.getCreatedAt());

            // Th√¥ng tin freelancer
            Map<String, Object> freelancerData = new HashMap<>();
            freelancerData.put("id", apply.getFreelancer().getId());
            freelancerData.put("fullName", apply.getFreelancer().getFullName());
            freelancerData.put("avatar", apply.getFreelancer().getAvatar());
            freelancerData.put("reputation", apply.getFreelancer().getReputation());
            freelancerData.put("email", apply.getFreelancer().getEmail());
            applyData.put("freelancer", freelancerData);

            return applyData;
        }).collect(Collectors.toList());

        // Th√¥ng tin ƒë·∫ßy ƒë·ªß c√¥ng vi·ªác
        Map<String, Object> jobData = new HashMap<>();
        jobData.put("id", job.getId());
        jobData.put("title", job.getTitle());
        jobData.put("description", job.getDescription());
        jobData.put("budget", job.getBudget());
        jobData.put("durationHours", job.getDurationHours());
        jobData.put("status", job.getStatus());
        jobData.put("step", job.getStep());
        jobData.put("createdAt", job.getCreatedAt());
        jobData.put("postedAt", job.getPostedAt());
        jobData.put("closedAt", job.getClosedAt());
        jobData.put("document", job.getDocument());

        // Th√¥ng tin major
        jobData.put("major",
                Map.of("id", job.getMajor().getId(), "name", job.getMajor().getName()));

        // Danh s√°ch skills
        jobData.put("skills",
                job.getSkills().stream()
                        .map(skill -> Map.of("id", skill.getId(), "name", skill.getName()))
                        .collect(Collectors.toList()));

        // Danh s√°ch languages
        jobData.put("languages",
                job.getLanguages().stream().map(language -> Map.of("id", language.getId(), "name",
                        language.getName(), "iso", language.getIso()))
                        .collect(Collectors.toList()));

        Map<String, Object> response = new HashMap<>();
        response.put("job", jobData);
        response.put("totalApplies", appliesData.size());
        response.put("pendingApplies", appliesData.stream()
                .mapToLong(apply -> "PENDING"
                        .equals(((Map<String, Object>) apply).get("status").toString()) ? 1 : 0)
                .sum());
        response.put("acceptedApplies", appliesData.stream()
                .mapToLong(apply -> "ACCEPT"
                        .equals(((Map<String, Object>) apply).get("status").toString()) ? 1 : 0)
                .sum());
        response.put("rejectedApplies", appliesData.stream()
                .mapToLong(apply -> "REJECTED"
                        .equals(((Map<String, Object>) apply).get("status").toString()) ? 1 : 0)
                .sum());
        response.put("applies", appliesData);

        // Th√¥ng b√°o v·ªÅ auto reject n·∫øu c√≥
        if (autoRejectedCount > 0) {
            response.put("autoRejectedOnLoad", true);
            response.put("autoRejectedCount", autoRejectedCount);
            response.put("autoRejectMessage", "ƒê√£ t·ª± ƒë·ªông t·ª´ ch·ªëi " + autoRejectedCount
                    + " ·ª©ng tuy·ªÉn do d·ª± √°n ƒë√£ ch·ªçn freelancer.");
        }

        return ResponseEntity.ok(response);
    }

    @PreAuthorize("hasRole('NHA_TUYEN_DUNG')")
    @PatchMapping(EndPoint.Job.REJECT_APPLY)
    @Transactional
    public ResponseEntity<?> rejectApply(@PathVariable Integer id, @PathVariable Integer applyId) {
        Integer currentEmployerId = securityUtil.getCurrentUser().getId();

        // T√¨m Apply v√† validate
        Apply applyToReject = repositoryApply.findById(applyId).orElseThrow(
                () -> new DataConflictException("Kh√¥ng t√¨m th·∫•y ƒë∆°n ·ª©ng tuy·ªÉn v·ªõi ID: " + applyId));

        Job job = applyToReject.getJob();

        // Ki·ªÉm tra job thu·ªôc v·ªÅ employer hi·ªán t·∫°i
        if (!job.getEmployer().getId().equals(currentEmployerId)) {
            throw new DataConflictException("B·∫°n kh√¥ng c√≥ quy·ªÅn thao t√°c v·ªõi c√¥ng vi·ªác n√†y!");
        }

        // Ki·ªÉm tra job ID trong URL kh·ªõp v·ªõi job c·ªßa apply
        if (!job.getId().equals(id)) {
            throw new DataConflictException("ID c√¥ng vi·ªác kh√¥ng kh·ªõp v·ªõi ƒë∆°n ·ª©ng tuy·ªÉn!");
        }

        // Ki·ªÉm tra apply ƒëang ·ªü tr·∫°ng th√°i PENDING
        if (applyToReject.getStatus() != Apply.Status.PENDING) {
            throw new DataConflictException("Ch·ªâ c√≥ th·ªÉ t·ª´ ch·ªëi ƒë∆°n ·ª©ng tuy·ªÉn ƒëang ch·ªù x·ª≠ l√Ω!");
        }

        // Reject apply
        applyToReject.setStatus(Apply.Status.REJECTED);
        repositoryApply.save(applyToReject);

        return ResponseEntity.noContent().build();
    }

    /**
     * Helper method ƒë·ªÉ ki·ªÉm tra job c√≥ th·ªÉ ch·ªçn freelancer kh√¥ng
     */
    private void validateJobForFreelancerSelection(Job job, Integer currentEmployerId) {
        // Ki·ªÉm tra job thu·ªôc v·ªÅ employer hi·ªán t·∫°i
        if (!job.getEmployer().getId().equals(currentEmployerId)) {
            throw new DataConflictException("B·∫°n kh√¥ng c√≥ quy·ªÅn thao t√°c v·ªõi c√¥ng vi·ªác n√†y!");
        }

        // Ki·ªÉm tra job ƒëang ·ªü tr·∫°ng th√°i PUBLIC
        if (job.getStatus() != Job.Status.PUBLIC) {
            throw new DataConflictException(
                    "Ch·ªâ c√≥ th·ªÉ ch·ªçn freelancer cho c√¥ng vi·ªác ƒëang c√¥ng khai!");
        }

        // Ki·ªÉm tra xem job ƒë√£ c√≥ freelancer ƒë∆∞·ª£c ch·∫•p nh·∫≠n ch∆∞a
        boolean hasAcceptedFreelancer = job.getApplies().stream()
                .anyMatch(apply -> apply.getStatus() == Apply.Status.ACCEPT);

        if (hasAcceptedFreelancer) {
            throw new DataConflictException("C√¥ng vi·ªác n√†y ƒë√£ c√≥ freelancer ƒë∆∞·ª£c ch·∫•p nh·∫≠n!");
        }
    }

    /**
     * Helper method ƒë·ªÉ t·ª± ƒë·ªông reject t·∫•t c·∫£ apply kh√°c v√† tr·∫£ v·ªÅ s·ªë l∆∞·ª£ng reject
     */
    private int autoRejectOtherApplies(Job job, Integer selectedApplyId) {
        List<Apply> pendingApplies =
                job.getApplies().stream().filter(apply -> !apply.getId().equals(selectedApplyId)
                        && apply.getStatus() == Apply.Status.PENDING).toList();

        if (pendingApplies.isEmpty()) {
            return 0;
        }

        // Batch reject t·∫•t c·∫£ apply c√≤n l·∫°i
        pendingApplies.forEach(apply -> {
            apply.setStatus(Apply.Status.REJECTED);
            repositoryApply.save(apply);
            serviceNotification.sendNoticationWithUserId(apply.getFreelancer().getId(),
                    "T·ª´ ch·ªëi ·ª©ng tuy·ªÉn",
                    "·ª®ng tuy·ªÉn c·ªßa b·∫°n cho c√¥ng vi·ªác '" + job.getTitle() + "' ƒê√£ b·ªã t·ª´ ch·ªëi.");
        });

        return pendingApplies.size();
    }

    /**
     * T·ª± ƒë·ªông reject c√°c apply PENDING khi load trang n·∫øu job ƒë√£ c√≥ freelancer ƒë∆∞·ª£c ch·∫•p nh·∫≠n D√πng
     * cho vi·ªác x·ª≠ l√Ω d·ªØ li·ªáu m·∫´u kh√¥ng ƒë·ªìng b·ªô
     */
    private int performAutoRejectOnPageLoad(Job job) {
        // Ki·ªÉm tra job ƒë√£ c√≥ freelancer ƒë∆∞·ª£c ch·∫•p nh·∫≠n ch∆∞a
        boolean hasAcceptedFreelancer = job.getApplies().stream()
                .anyMatch(apply -> apply.getStatus() == Apply.Status.ACCEPT);

        if (!hasAcceptedFreelancer) {
            return 0; // Kh√¥ng c√≥ freelancer ƒë∆∞·ª£c ch·ªçn, kh√¥ng c·∫ßn auto reject
        }

        // T√¨m c√°c apply PENDING c·∫ßn t·ª± ƒë·ªông reject
        List<Apply> pendingApplies = job.getApplies().stream()
                .filter(apply -> apply.getStatus() == Apply.Status.PENDING).toList();

        if (pendingApplies.isEmpty()) {
            return 0; // Kh√¥ng c√≥ apply PENDING n√†o c·∫ßn reject
        }

        // T·ª± ƒë·ªông reject t·∫•t c·∫£ apply PENDING (do job ƒë√£ c√≥ freelancer)
        pendingApplies.forEach(apply -> {
            apply.setStatus(Apply.Status.REJECTED);
            repositoryApply.save(apply);
        });

        return pendingApplies.size();
    }
}
